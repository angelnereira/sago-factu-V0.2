generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// MULTI-TENANCY & ORGANIZATIONS
// ============================================

model Organization {
  id      String  @id @default(cuid())
  slug    String  @unique
  name    String
  ruc     String  @unique
  dv      String // Dígito verificador
  email   String
  phone   String?
  address String

  // HKA Configuration
  hkaEnabled   Boolean @default(true)
  hkaTokenUser String? // Token específico si lo tienen

  // Limits
  maxUsers  Int  @default(10)
  maxFolios Int? // Límite máximo de folios

  // Status
  isActive      Boolean   @default(true)
  suspendedAt   DateTime?
  suspendReason String?

  // Metadata
  metadata Json? // JSON nativo para PostgreSQL

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users    User[]
  folios   FolioAssignment[]
  invoices Invoice[]
  apiKeys  ApiKey[]

  @@index([slug])
  @@index([ruc])
  @@index([isActive])
  @@map("organizations")
}

// ============================================
// AUTHENTICATION & USERS
// ============================================

model User {
  id    String @id @default(cuid())
  email String @unique
  emailVerified DateTime?
  password String // bcrypt hashed
  name  String
  phone String?
  image String?

  // Multi-tenant
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Role
  role UserRole @default(USER)

  // Preferences
  emailNotifications Boolean @default(true)
  language          String  @default("es")
  timezone          String  @default("America/Panama")

  // Status
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  lastLoginIp String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  invoices     Invoice[]
  sessions     Session[]
  accounts     Account[]
  notifications Notification[]
  auditLogs    AuditLog[]

  @@index([organizationId])
  @@index([email])
  @@index([role])
  @@map("users")
}

enum UserRole {
  SUPER_ADMIN // Gestión global
  ORG_ADMIN   // Admin de organización
  USER        // Usuario estándar
  API_USER    // Usuario solo API
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

// ============================================
// FOLIO MANAGEMENT
// ============================================

model FolioPool {
  id      String @id @default(cuid())
  // Identificación
  batchNumber String @unique
  provider    String @default("HKA")

  // Cantidades
  totalFolios    Int
  availableFolios Int
  assignedFolios  Int @default(0)
  consumedFolios  Int @default(0)

  // Información de compra
  purchaseDate      DateTime @default(now())
  purchaseAmount    Decimal  @db.Decimal(12, 2)
  hkaInvoiceNumber String?

  // Rango de folios
  folioStart String?
  folioEnd   String?

  // Status
  isActive  Boolean   @default(true)
  expiresAt DateTime?

  // Metadata
  metadata Json? // JSON nativo para PostgreSQL

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignments FolioAssignment[]

  @@index([isActive])
  @@index([batchNumber])
  @@index([expiresAt])
  @@map("folio_pools")
}

model FolioAssignment {
  id String @id @default(cuid())

  // Pool & Organization
  folioPoolId   String
  folioPool     FolioPool @relation(fields: [folioPoolId], references: [id], onDelete: Restrict)
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Cantidades
  assignedAmount  Int
  consumedAmount  Int @default(0)

  // Alertas
  alertThreshold Int     @default(10) // Porcentaje
  alertSent      Boolean @default(false)
  lastAlertAt    DateTime?

  // Timestamps
  assignedAt DateTime @default(now())
  expiresAt  DateTime?

  // Notas
  notes      String? @db.Text
  assignedBy String? // User ID que asignó

  @@unique([folioPoolId, organizationId])
  @@index([organizationId])
  @@index([folioPoolId])
  @@map("folio_assignments")
}

model FolioConsumption {
  id String @id @default(cuid())

  // Referencias
  assignmentId String
  invoiceId    String @unique
  invoice      Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Metadata
  consumedAt  DateTime @default(now())
  folioNumber String?

  @@index([assignmentId])
  @@index([invoiceId])
  @@index([consumedAt])
  @@map("folio_consumptions")
}

// ============================================
// INVOICES & BILLING
// ============================================

model Invoice {
  id String @id @default(cuid())

  // Multi-tenant
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Creator
  createdBy String
  user      User @relation(fields: [createdBy], references: [id])

  // Idempotency
  clientReferenceId String @unique

  // Datos del Emisor (snapshot)
  issuerRuc     String
  issuerDv      String
  issuerName    String
  issuerAddress String
  issuerEmail   String
  issuerPhone   String?

  // Datos del Receptor
  receiverType     ReceiverType @default(CONTRIBUTOR)
  receiverRuc      String?
  receiverDv       String?
  receiverName     String
  receiverEmail    String?
  receiverPhone    String?
  receiverAddress  String?

  // Documento
  documentType  DocumentType @default(FACTURA)
  invoiceNumber String?      // Asignado por HKA
  cufe          String?      @unique
  qrCode        String?      @db.Text      

  // Montos
  subtotal              Decimal @db.Decimal(12, 2)
  discount              Decimal @db.Decimal(12, 2) @default(0)
  subtotalAfterDiscount Decimal @db.Decimal(12, 2)
  itbms                 Decimal @db.Decimal(12, 2) // Impuesto
  total                 Decimal @db.Decimal(12, 2)
  currency              String  @default("PAB")

  // Fechas
  issueDate DateTime @default(now())
  dueDate   DateTime?

  // Notas
  notes         String? @db.Text
  internalNotes String? @db.Text 

  // Estado
  status         InvoiceStatus @default(DRAFT)
  hkaStatus      String?
  hkaMessage     String?      @db.Text
  rejectionReason String?     @db.Text
  hkaCode        String?      // Código de respuesta HKA

  // Storage
  xmlUrl String?
  pdfUrl String?
  rawXml String?              @db.Text 

  // Anulación
  isCancelled        Boolean   @default(false)
  cancelledAt        DateTime?
  cancellationReason String?   @db.Text
  cancellationCufe   String?

  // Retry logic
  retryCount   Int      @default(0)
  maxRetries   Int      @default(3)
  nextRetryAt  DateTime?

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  queuedAt    DateTime?
  sentAt      DateTime?
  certifiedAt DateTime?

  // Relations
  items           InvoiceItem[]
  logs            InvoiceLog[]
  folioConsumption FolioConsumption?

  @@index([organizationId])
  @@index([createdBy])
  @@index([status])
  @@index([cufe])
  @@index([issuerRuc])
  @@index([receiverRuc])
  @@index([createdAt])
  @@index([issueDate])
  @@index([documentType])
  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT       // Borrador
  QUEUED      // En cola
  PROCESSING  // Procesando en HKA
  CERTIFIED   // Certificado por DGI
  REJECTED    // Rechazado
  CANCELLED   // Anulado
  ERROR       // Error
}

enum DocumentType {
  FACTURA           // 01
  NOTA_CREDITO      // 02
  NOTA_DEBITO       // 03
  FACTURA_EXPORTACION // 04
}

enum ReceiverType {
  CONTRIBUTOR    // 01 - Contribuyente con RUC
  FINAL_CONSUMER // 02 - Consumidor final
  FOREIGN        // 03 - Extranjero
}

model InvoiceItem {
  id String @id @default(cuid())

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Order
  lineNumber Int

  // Product/Service
  code        String
  description String @db.Text

  // Quantities
  quantity  Decimal @db.Decimal(12, 4)
  unitPrice Decimal @db.Decimal(12, 2)
  unit      String @default("UND")

  // Discount
  discount     Decimal @db.Decimal(12, 2) @default(0)
  discountRate Decimal @db.Decimal(5, 2) @default(0)

  // Tax (ITBMS)
  taxRate   Decimal @db.Decimal(5, 2) @default(7)
  taxCode   String  @default("01") // Código ITBMS
  taxAmount Decimal @db.Decimal(12, 2)

  // Totals
  subtotal Decimal @db.Decimal(12, 2)
  total    Decimal @db.Decimal(12, 2)

  // Additional info
  cpbsCode String? // Código CPBS (Clasificación)
  cpbsUnit String?

  @@index([invoiceId])
  @@map("invoice_items")
}

model InvoiceLog {
  id String @id @default(cuid())

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Log
  action   LogAction
  message  String    @db.Text
  metadata Json?

  // User (opcional)
  userId    String?
  userEmail String?
  userIp    String?

  // Timestamp
  createdAt DateTime @default(now())

  @@index([invoiceId])
  @@index([createdAt])
  @@index([action])
  @@map("invoice_logs")
}

enum LogAction {
  CREATED
  UPDATED
  QUEUED
  SENT
  PROCESSING
  CERTIFIED
  REJECTED
  ERROR
  CANCELLED
  DOWNLOADED_XML
  DOWNLOADED_PDF
  EMAIL_SENT
  RETRIED
  MANUAL_INTERVENTION
}

// ============================================
// API KEYS & INTEGRATIONS
// ============================================

model ApiKey {
  id String @id @default(cuid())

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Key
  name   String
  key    String @unique
  prefix String // Primeros 8 caracteres

  // Permissions
  permissions String // JSON como string para SQLite

  // Rate limiting
  rateLimit      Int @default(100) // por minuto
  rateLimitWindow Int @default(60) // segundos

  // Status
  isActive    Boolean   @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([key])
  @@index([prefix])
  @@map("api_keys")
}

// ============================================
// NOTIFICATIONS
// ============================================

model Notification {
  id String @id @default(cuid())

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Content
  type    NotificationType
  title   String
  message String         @db.Text
  link    String?

  // Metadata
  metadata Json? // JSON nativo para PostgreSQL

  // Status
  read    Boolean   @default(false)
  readAt  DateTime?

  // Timestamp
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@map("notifications")
}

enum NotificationType {
  INVOICE_CERTIFIED
  INVOICE_REJECTED
  INVOICE_ERROR
  FOLIOS_LOW
  FOLIOS_DEPLETED
  FOLIOS_ASSIGNED
  SYSTEM_ALERT
  PAYMENT_REQUIRED
}

// ============================================
// AUDIT LOG
// ============================================

model AuditLog {
  id String @id @default(cuid())

  // User
  userId    String?
  user      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userEmail String?

  // Action
  action  String
  entity  String // Invoice, User, Organization, etc.
  entityId String

  // Details
  changes String? // JSON como string para SQLite

  // Context
  ip        String?
  userAgent String?

  // Timestamp
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

// ============================================
// SYSTEM CONFIGURATION
// ============================================

model SystemConfig {
  id String @id @default(cuid())

  key         String @unique
  value       String // JSON como string para SQLite
  description String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  @@index([key])
  @@map("system_configs")
}
