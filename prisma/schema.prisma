generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// MULTI-TENANCY & ORGANIZATIONS
// ============================================

model Organization {
  id      String  @id @default(cuid())
  slug    String  @unique
  name    String
  ruc     String? @unique
  dv      String? // Dígito verificador
  email   String?
  phone   String?
  address String?
  website String?
  logo    String?

  // HKA Configuration
  hkaEnabled   Boolean @default(true)
  hkaTokenUser String? // Token específico si lo tienen

  // Campos para XML/HKA
  rucType       String  @default("2") // 1=Natural, 2=Jurídica, 3=Extranjero
  tradeName     String? // Nombre comercial
  branchCode    String  @default("0000")
  locationCode  String  @default("1-1-1")
  province      String  @default("PANAMA")
  district      String  @default("PANAMA")
  corregimiento String  @default("SAN FELIPE")

  // Configuración de facturación automática
  autoSendToHKA        Boolean @default(true)
  requireApproval      Boolean @default(false)
  emailOnCertification Boolean @default(true)
  emailOnError         Boolean @default(true)
  lowFoliosThreshold   Int     @default(10)

  // Limits
  maxUsers  Int  @default(10)
  maxFolios Int? // Límite máximo de folios

  // Status
  isActive      Boolean   @default(true)
  suspendedAt   DateTime?
  suspendReason String?

  // Metadata
  metadata Json? // JSON nativo para PostgreSQL

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users         User[]
  folios        FolioAssignment[]
  invoices      Invoice[]
  apiKeys       ApiKey[]
  systemConfigs SystemConfig[]
  customers     Customer[]
  apiLogs       ApiLog[]

  @@index([slug])
  @@index([ruc])
  @@index([isActive])
  @@map("organizations")
}

// ============================================
// AUTHENTICATION & USERS
// ============================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  password      String // bcrypt hashed
  name          String
  phone         String?
  image         String?

  // Multi-tenant
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Role
  role UserRole @default(USER)

  // Preferences
  emailNotifications Boolean @default(true)
  language           String  @default("es")
  timezone           String  @default("America/Panama")

  // Status
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  lastLoginIp String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  invoices      Invoice[]
  sessions      Session[]
  accounts      Account[]
  notifications Notification[]
  auditLogs     AuditLog[]
  apiLogs       ApiLog[]
  monitors      Monitor[]
  collections   Collection[]
  environments  Environment[]

  @@index([organizationId])
  @@index([email])
  @@index([role])
  @@map("users")
}

enum UserRole {
  SUPER_ADMIN // Gestión global
  ORG_ADMIN // Admin de organización
  USER // Usuario estándar
  API_USER // Usuario solo API
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

// ============================================
// FOLIO MANAGEMENT
// ============================================

model FolioPool {
  id          String @id @default(cuid())
  // Identificación
  batchNumber String @unique
  provider    String @default("HKA")

  // Cantidades
  totalFolios     Int
  availableFolios Int
  assignedFolios  Int @default(0)
  consumedFolios  Int @default(0)

  // Información de compra
  purchaseDate     DateTime @default(now())
  purchaseAmount   Decimal  @db.Decimal(12, 2)
  hkaInvoiceNumber String?

  // Rango de folios
  folioStart String?
  folioEnd   String?

  // Status
  isActive  Boolean   @default(true)
  expiresAt DateTime?

  // Metadata
  metadata Json? // JSON nativo para PostgreSQL

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignments FolioAssignment[]

  @@index([isActive])
  @@index([batchNumber])
  @@index([expiresAt])
  @@map("folio_pools")
}

model FolioAssignment {
  id String @id @default(cuid())

  // Pool & Organization
  folioPoolId    String
  folioPool      FolioPool    @relation(fields: [folioPoolId], references: [id], onDelete: Restrict)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Cantidades
  assignedAmount Int
  consumedAmount Int @default(0)

  // Alertas
  alertThreshold Int       @default(10) // Porcentaje
  alertSent      Boolean   @default(false)
  lastAlertAt    DateTime?

  // Timestamps
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?

  // Notas
  notes      String? @db.Text
  assignedBy String? // User ID que asignó

  @@unique([folioPoolId, organizationId])
  @@index([organizationId])
  @@index([folioPoolId])
  @@map("folio_assignments")
}

model FolioConsumption {
  id String @id @default(cuid())

  // Referencias
  assignmentId String
  invoiceId    String  @unique
  invoice      Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Metadata
  consumedAt  DateTime @default(now())
  folioNumber String?

  @@index([assignmentId])
  @@index([invoiceId])
  @@index([consumedAt])
  @@map("folio_consumptions")
}

// ============================================
// INVOICES & BILLING
// ============================================

model Invoice {
  id String @id @default(cuid())

  // Multi-tenant
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Creator
  createdBy String
  user      User   @relation(fields: [createdBy], references: [id])

  // Idempotency
  clientReferenceId String @unique
  
  // RELACIÓN CUSTOMER
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  // Datos del Emisor (snapshot)
  issuerRuc     String
  issuerDv      String
  issuerName    String
  issuerAddress String
  issuerEmail   String
  issuerPhone   String?

  // Datos del Receptor
  receiverType    ReceiverType @default(CONTRIBUTOR)
  receiverRuc     String?
  receiverDv      String?
  receiverName    String
  receiverEmail   String?
  receiverPhone   String?
  receiverAddress String?

  // Documento
  documentType  DocumentType @default(FACTURA)
  invoiceNumber String? // Asignado por HKA
  cufe          String?      @unique
  qrCode        String?      @db.Text

  // Campos adicionales para XML/HKA
  pointOfSale   String    @default("001")
  securityCode  String? // Código de seguridad (random 8-9 dígitos)
  deliveryDate  DateTime?
  paymentMethod String    @default("CASH") // CASH, CHECK, TRANSFER, CREDIT_CARD, DEBIT_CARD
  paymentTerm   String    @default("CASH") // CASH (Contado), CREDIT (Crédito)
  xmlContent    String?   @db.Text // XML generado

  // Montos
  subtotal              Decimal @db.Decimal(12, 2)
  discount              Decimal @default(0) @db.Decimal(12, 2)
  subtotalAfterDiscount Decimal @db.Decimal(12, 2)
  itbms                 Decimal @db.Decimal(12, 2) // Impuesto
  total                 Decimal @db.Decimal(12, 2)
  currency              String  @default("PAB")

  // Fechas
  issueDate DateTime  @default(now())
  dueDate   DateTime?

  // Notas
  notes         String? @db.Text
  internalNotes String? @db.Text

  // Estado
  status          InvoiceStatus @default(DRAFT)
  hkaStatus       String?
  hkaMessage      String?       @db.Text
  rejectionReason String?       @db.Text
  hkaCode         String? // Código de respuesta HKA

  // HKA Integration - Campos adicionales
  hkaProtocol        String?   @unique // Número de protocolo HKA
  hkaProtocolDate    DateTime?
  pdfBase64          String?   @db.Text // PDF firmado en base64
  hkaResponseCode    String? // Código numérico de respuesta HKA
  hkaResponseMessage String?   @db.Text // Mensaje de respuesta detallado
  hkaResponseData    Json? // Datos adicionales en JSON
  hkaLastAttempt     DateTime?
  hkaAttempts        Int       @default(0)

  // Storage
  xmlUrl String?
  pdfUrl String?
  rawXml String? @db.Text

  // Anulación
  isCancelled        Boolean   @default(false)
  cancelledAt        DateTime?
  cancellationReason String?   @db.Text
  cancellationCufe   String?

  // Retry logic
  retryCount  Int       @default(0)
  maxRetries  Int       @default(3)
  nextRetryAt DateTime?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  queuedAt    DateTime?
  sentAt      DateTime?
  certifiedAt DateTime?

  // Relations
  items            InvoiceItem[]
  logs             InvoiceLog[]
  folioConsumption FolioConsumption?
  emailDeliveries  EmailDelivery[]

  @@index([organizationId])
  @@index([createdBy])
  @@index([status])
  @@index([cufe])
  @@index([issuerRuc])
  @@index([receiverRuc])
  @@index([createdAt])
  @@index([issueDate])
  @@index([documentType])
  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT // Borrador
  QUEUED // En cola
  PROCESSING // Procesando en HKA
  CERTIFIED // Certificado por DGI
  REJECTED // Rechazado
  CANCELLED // Anulado
  ERROR // Error
}

enum DocumentType {
  FACTURA // 01
  NOTA_CREDITO // 02
  NOTA_DEBITO // 03
  FACTURA_EXPORTACION // 04
}

enum ReceiverType {
  CONTRIBUTOR // 01 - Contribuyente con RUC
  FINAL_CONSUMER // 02 - Consumidor final
  FOREIGN // 03 - Extranjero
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  BOUNCED
  FAILED
}

// ============================================
// CUSTOMERS (CLIENTES)
// ============================================

model Customer {
  id String @id @default(cuid())

  // Multi-tenant
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Datos básicos
  ruc     String
  dv      String
  name    String
  email   String?
  phone   String?
  address String

  // Ubicación
  locationCode  String?
  province      String?
  district      String?
  corregimiento String?
  countryCode   String  @default("PA")

  // Tipo de cliente
  clientType String @default("01") // 01=Contribuyente, 02=Consumidor Final
  rucType    String @default("2") // 1=Natural, 2=Jurídica, 3=Extranjero

  // Status
  isActive Boolean @default(true)

  // Relación con Invoice
  invoices Invoice[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, ruc, dv])
  @@index([organizationId])
  @@index([ruc])
  @@map("customers")
}

model InvoiceItem {
  id String @id @default(cuid())

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Order
  lineNumber Int

  // Product/Service
  code        String
  description String @db.Text

  // Quantities
  quantity  Decimal @db.Decimal(12, 4)
  unitPrice Decimal @db.Decimal(12, 2)
  unit      String  @default("UND")

  // Discount
  discount        Decimal  @default(0) @db.Decimal(12, 2)
  discountRate    Decimal  @default(0) @db.Decimal(5, 2)
  discountedPrice Decimal? @db.Decimal(12, 2) // Precio unitario con descuento

  // Tax (ITBMS)
  taxRate   Decimal @default(7) @db.Decimal(5, 2)
  taxCode   String  @default("01") // Código ITBMS
  taxAmount Decimal @db.Decimal(12, 2)

  // Totals
  subtotal Decimal @db.Decimal(12, 2)
  total    Decimal @db.Decimal(12, 2)

  // Additional info
  cpbsCode String? // Código CPBS (Clasificación)
  cpbsUnit String?

  @@index([invoiceId])
  @@map("invoice_items")
}

model InvoiceLog {
  id String @id @default(cuid())

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Log
  action   LogAction
  message  String    @db.Text
  metadata Json?

  // User (opcional)
  userId    String?
  userEmail String?
  userIp    String?

  // Timestamp
  createdAt DateTime @default(now())

  @@index([invoiceId])
  @@index([createdAt])
  @@index([action])
  @@map("invoice_logs")
}

enum LogAction {
  CREATED
  UPDATED
  QUEUED
  SENT
  PROCESSING
  CERTIFIED
  REJECTED
  ERROR
  CANCELLED
  DOWNLOADED_XML
  DOWNLOADED_PDF
  EMAIL_SENT
  RETRIED
  MANUAL_INTERVENTION
}

// ============================================
// EMAIL DELIVERY
// ============================================

model EmailDelivery {
  id String @id @default(cuid())

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  recipientEmail String
  hkaTrackingId  String?

  status EmailStatus

  sentAt     DateTime?
  deliveredAt DateTime?

  includePDF   Boolean @default(true)
  includeXML   Boolean @default(true)
  customMessage String? @db.Text

  retryCount Int    @default(0)
  lastError  String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([invoiceId])
  @@index([status])
  @@index([hkaTrackingId])
  @@map("email_deliveries")
}

// ============================================
// API KEYS & INTEGRATIONS
// ============================================

model ApiKey {
  id String @id @default(cuid())

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Key
  name   String
  key    String @unique
  prefix String // Primeros 8 caracteres

  // Permissions
  permissions String // JSON como string para SQLite

  // Rate limiting
  rateLimit       Int @default(100) // por minuto
  rateLimitWindow Int @default(60) // segundos

  // Status
  isActive   Boolean   @default(true)
  lastUsedAt DateTime?
  expiresAt  DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([key])
  @@index([prefix])
  @@map("api_keys")
}

// ============================================
// NOTIFICATIONS
// ============================================

model Notification {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Content
  type    NotificationType
  title   String
  message String           @db.Text
  link    String?

  // Metadata
  metadata Json? // JSON nativo para PostgreSQL

  // Status
  read   Boolean   @default(false)
  readAt DateTime?

  // Timestamp
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@map("notifications")
}

enum NotificationType {
  INVOICE_CERTIFIED
  INVOICE_REJECTED
  INVOICE_ERROR
  FOLIOS_LOW
  FOLIOS_DEPLETED
  FOLIOS_ASSIGNED
  SYSTEM_ALERT
  PAYMENT_REQUIRED
}

// ============================================
// AUDIT LOG
// ============================================

model AuditLog {
  id String @id @default(cuid())

  // User
  userId    String?
  user      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userEmail String?

  // Action
  action   String
  entity   String // Invoice, User, Organization, etc.
  entityId String

  // Details
  changes String? // JSON como string para SQLite

  // Context
  ip        String?
  userAgent String?

  // Timestamp
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

// ============================================
// SYSTEM CONFIGURATION
// ============================================

model SystemConfig {
  id String @id @default(cuid())

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  key         String
  value       String   @db.Text // JSON como string
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  @@unique([organizationId, key])
  @@index([key])
  @@index([organizationId])
  @@map("system_configs")
}

// ============================================
// API CALL LOGS
// ============================================

model ApiLog {
  id String @id @default(cuid())

  // Request Details
  method   String // GET, POST, PUT, DELETE, etc.
  path     String
  endpoint String // Full endpoint
  userId   String?
  user     User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  // Request Data
  requestHeaders Json? // Headers como JSON
  requestBody    String? @db.Text // Body como string (puede ser grande)
  requestQuery   Json? // Query params

  // Response Data
  statusCode      Int
  responseBody    String? @db.Text // Response como string
  responseHeaders Json? // Response headers
  success         Boolean
  errorMessage    String? @db.Text

  // Technical Details
  ip           String?
  userAgent    String?
  duration     Int? // Duración en ms
  responseSize Int? // Tamaño de respuesta en bytes

  // Context
  apiName   String? // HKA, Internal, External
  apiMethod String? // Método específico del API (ConsultarFolios, etc.)

  // Timestamp
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([organizationId])
  @@index([endpoint])
  @@index([statusCode])
  @@index([success])
  @@index([apiName])
  @@index([createdAt])
  @@map("api_logs")
}

// ============================================
// MONITORING SYSTEM
// ============================================

model Monitor {
  id String @id @default(cuid())
  
  // Basic info
  name String
  description String? @db.Text
  
  // Collection reference
  collectionId String?
  collection Collection? @relation(fields: [collectionId], references: [id], onDelete: SetNull)
  
  // Schedule
  schedule Json // Cron expression and settings
  enabled Boolean @default(true)
  
  // Multi-region
  regions Json? // Array of regions
  
  // Notification settings
  notifications Json? // Notification config
  
  // Metadata
  createdBy String
  user User @relation(fields: [createdBy], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  runs MonitorRun[]
  
  @@index([createdBy])
  @@index([enabled])
  @@map("monitors")
}

model MonitorRun {
  id String @id @default(cuid())
  
  // Run info
  monitorId String
  monitor Monitor @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  
  status String // RUNNING | SUCCESS | FAILED | TIMEOUT
  region String?
  
  // Timing
  startedAt DateTime
  finishedAt DateTime?
  duration Int? // milliseconds
  
  triggeredBy String? // user_id or 'schedule'
  
  // Results
  totalRequests Int @default(0)
  passedTests Int @default(0)
  failedTests Int @default(0)
  
  error String? @db.Text
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relations
  requests MonitorRunRequest[]
  
  @@index([monitorId])
  @@index([status])
  @@index([startedAt])
  @@map("monitor_runs")
}

model MonitorRunRequest {
  id String @id @default(cuid())
  
  runId String
  run MonitorRun @relation(fields: [runId], references: [id], onDelete: Cascade)
  
  requestName String
  method String
  url String
  
  statusCode Int?
  responseTime Int? // milliseconds
  responseSize Int? // bytes
  
  passedTests Int @default(0)
  failedTests Int @default(0)
  
  error String? @db.Text
  errorCode String?
  
  // Request/Response (sensitive data)
  requestBody String? @db.Text
  responseBody String? @db.Text
  requestHeaders Json?
  responseHeaders Json?
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relations
  tests MonitorRunTest[]
  
  @@index([runId])
  @@map("monitor_run_requests")
}

model MonitorRunTest {
  id String @id @default(cuid())
  
  requestId String
  request MonitorRunRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  
  testName String
  passed Boolean
  message String? @db.Text
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@index([requestId])
  @@index([passed])
  @@map("monitor_run_tests")
}

model Collection {
  id String @id @default(cuid())
  
  name String
  definition Json? // Collection definition (JSON format)
  
  // Metadata
  createdBy String
  user User @relation(fields: [createdBy], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  monitors Monitor[]
  
  @@index([createdBy])
  @@map("collections")
}

model Environment {
  id String @id @default(cuid())
  
  name String
  
  // Variables (encrypted at rest)
  variables Json? // { [key: string]: string }
  
  // Scope
  scope String @default("collection") // global | collection | monitor
  
  // Metadata
  createdBy String
  user User @relation(fields: [createdBy], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([createdBy])
  @@index([scope])
  @@map("environments")
}
